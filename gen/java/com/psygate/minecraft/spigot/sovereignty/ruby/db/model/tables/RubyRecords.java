/**
 * This class is generated by jOOQ
 */
package com.psygate.minecraft.spigot.sovereignty.ruby.db.model.tables;


import com.psygate.minecraft.spigot.sovereignty.ruby.db.model.Keys;
import com.psygate.minecraft.spigot.sovereignty.ruby.db.model.Nucleus;
import com.psygate.minecraft.spigot.sovereignty.ruby.db.model.tables.records.RubyRecordsRecord;
import com.psygate.minecraft.spigot.sovereignty.ruby.logging.LogType;
import com.psygate.minecraft.spigot.sovereignty.ruby.sql.util.LogTypeConverter;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RubyRecords extends TableImpl<RubyRecordsRecord> {

	private static final long serialVersionUID = -1546870128;

	/**
	 * The reference instance of <code>nucleus.ruby_records</code>
	 */
	public static final RubyRecords RUBY_RECORDS = new RubyRecords();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<RubyRecordsRecord> getRecordType() {
		return RubyRecordsRecord.class;
	}

	/**
	 * The column <code>nucleus.ruby_records.snitch_id</code>.
	 */
	public final TableField<RubyRecordsRecord, Long> SNITCH_ID = createField("snitch_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>nucleus.ruby_records.record_id</code>.
	 */
	public final TableField<RubyRecordsRecord, Long> RECORD_ID = createField("record_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>nucleus.ruby_records.time_of_event</code>.
	 */
	public final TableField<RubyRecordsRecord, Timestamp> TIME_OF_EVENT = createField("time_of_event", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>nucleus.ruby_records.log_type</code>.
	 */
	public final TableField<RubyRecordsRecord, LogType> LOG_TYPE = createField("log_type", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "", new LogTypeConverter());

	/**
	 * Create a <code>nucleus.ruby_records</code> table reference
	 */
	public RubyRecords() {
		this("ruby_records", null);
	}

	/**
	 * Create an aliased <code>nucleus.ruby_records</code> table reference
	 */
	public RubyRecords(String alias) {
		this(alias, RUBY_RECORDS);
	}

	private RubyRecords(String alias, Table<RubyRecordsRecord> aliased) {
		this(alias, aliased, null);
	}

	private RubyRecords(String alias, Table<RubyRecordsRecord> aliased, Field<?>[] parameters) {
		super(alias, Nucleus.NUCLEUS, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<RubyRecordsRecord, Long> getIdentity() {
		return Keys.IDENTITY_RUBY_RECORDS;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<RubyRecordsRecord> getPrimaryKey() {
		return Keys.KEY_RUBY_RECORDS_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<RubyRecordsRecord>> getKeys() {
		return Arrays.<UniqueKey<RubyRecordsRecord>>asList(Keys.KEY_RUBY_RECORDS_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<RubyRecordsRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<RubyRecordsRecord, ?>>asList(Keys.RUBY_RECORDS_IBFK_1);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public RubyRecords as(String alias) {
		return new RubyRecords(alias, this);
	}

	/**
	 * Rename this table
	 */
	public RubyRecords rename(String name) {
		return new RubyRecords(name, null);
	}
}
