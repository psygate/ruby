/**
 * This class is generated by jOOQ
 */
package com.psygate.minecraft.spigot.sovereignty.ruby.db.model.tables.records;


import com.psygate.minecraft.spigot.sovereignty.ruby.db.model.tables.RubyLocation;
import com.psygate.minecraft.spigot.sovereignty.ruby.db.model.tables.interfaces.IRubyLocation;
import com.psygate.minecraft.spigot.sovereignty.ruby.events.RecordLocationType;

import java.util.UUID;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RubyLocationRecord extends UpdatableRecordImpl<RubyLocationRecord> implements Record7<Long, Integer, Integer, Integer, UUID, Long, RecordLocationType>, IRubyLocation {

	private static final long serialVersionUID = 1715539813;

	/**
	 * Setter for <code>nucleus.ruby_location.id</code>.
	 */
	public void setId(Long value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>nucleus.ruby_location.id</code>.
	 */
	@Override
	public Long getId() {
		return (Long) getValue(0);
	}

	/**
	 * Setter for <code>nucleus.ruby_location.x</code>.
	 */
	public void setX(Integer value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>nucleus.ruby_location.x</code>.
	 */
	@Override
	public Integer getX() {
		return (Integer) getValue(1);
	}

	/**
	 * Setter for <code>nucleus.ruby_location.y</code>.
	 */
	public void setY(Integer value) {
		setValue(2, value);
	}

	/**
	 * Getter for <code>nucleus.ruby_location.y</code>.
	 */
	@Override
	public Integer getY() {
		return (Integer) getValue(2);
	}

	/**
	 * Setter for <code>nucleus.ruby_location.z</code>.
	 */
	public void setZ(Integer value) {
		setValue(3, value);
	}

	/**
	 * Getter for <code>nucleus.ruby_location.z</code>.
	 */
	@Override
	public Integer getZ() {
		return (Integer) getValue(3);
	}

	/**
	 * Setter for <code>nucleus.ruby_location.world_uuid</code>.
	 */
	public void setWorldUuid(UUID value) {
		setValue(4, value);
	}

	/**
	 * Getter for <code>nucleus.ruby_location.world_uuid</code>.
	 */
	@Override
	public UUID getWorldUuid() {
		return (UUID) getValue(4);
	}

	/**
	 * Setter for <code>nucleus.ruby_location.record_id</code>.
	 */
	public void setRecordId(Long value) {
		setValue(5, value);
	}

	/**
	 * Getter for <code>nucleus.ruby_location.record_id</code>.
	 */
	@Override
	public Long getRecordId() {
		return (Long) getValue(5);
	}

	/**
	 * Setter for <code>nucleus.ruby_location.record_location_type</code>.
	 */
	public void setRecordLocationType(RecordLocationType value) {
		setValue(6, value);
	}

	/**
	 * Getter for <code>nucleus.ruby_location.record_location_type</code>.
	 */
	@Override
	public RecordLocationType getRecordLocationType() {
		return (RecordLocationType) getValue(6);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<Long> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record7 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row7<Long, Integer, Integer, Integer, UUID, Long, RecordLocationType> fieldsRow() {
		return (Row7) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row7<Long, Integer, Integer, Integer, UUID, Long, RecordLocationType> valuesRow() {
		return (Row7) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Long> field1() {
		return RubyLocation.RUBY_LOCATION.ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field2() {
		return RubyLocation.RUBY_LOCATION.X;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field3() {
		return RubyLocation.RUBY_LOCATION.Y;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field4() {
		return RubyLocation.RUBY_LOCATION.Z;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<UUID> field5() {
		return RubyLocation.RUBY_LOCATION.WORLD_UUID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Long> field6() {
		return RubyLocation.RUBY_LOCATION.RECORD_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<RecordLocationType> field7() {
		return RubyLocation.RUBY_LOCATION.RECORD_LOCATION_TYPE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Long value1() {
		return getId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value2() {
		return getX();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value3() {
		return getY();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value4() {
		return getZ();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UUID value5() {
		return getWorldUuid();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Long value6() {
		return getRecordId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public RecordLocationType value7() {
		return getRecordLocationType();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public RubyLocationRecord value1(Long value) {
		setId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public RubyLocationRecord value2(Integer value) {
		setX(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public RubyLocationRecord value3(Integer value) {
		setY(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public RubyLocationRecord value4(Integer value) {
		setZ(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public RubyLocationRecord value5(UUID value) {
		setWorldUuid(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public RubyLocationRecord value6(Long value) {
		setRecordId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public RubyLocationRecord value7(RecordLocationType value) {
		setRecordLocationType(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public RubyLocationRecord values(Long value1, Integer value2, Integer value3, Integer value4, UUID value5, Long value6, RecordLocationType value7) {
		value1(value1);
		value2(value2);
		value3(value3);
		value4(value4);
		value5(value5);
		value6(value6);
		value7(value7);
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached RubyLocationRecord
	 */
	public RubyLocationRecord() {
		super(RubyLocation.RUBY_LOCATION);
	}

	/**
	 * Create a detached, initialised RubyLocationRecord
	 */
	public RubyLocationRecord(Long id, Integer x, Integer y, Integer z, UUID worldUuid, Long recordId, RecordLocationType recordLocationType) {
		super(RubyLocation.RUBY_LOCATION);

		setValue(0, id);
		setValue(1, x);
		setValue(2, y);
		setValue(3, z);
		setValue(4, worldUuid);
		setValue(5, recordId);
		setValue(6, recordLocationType);
	}
}
