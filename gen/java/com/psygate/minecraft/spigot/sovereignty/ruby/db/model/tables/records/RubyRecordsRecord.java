/**
 * This class is generated by jOOQ
 */
package com.psygate.minecraft.spigot.sovereignty.ruby.db.model.tables.records;


import com.psygate.minecraft.spigot.sovereignty.ruby.db.model.tables.RubyRecords;
import com.psygate.minecraft.spigot.sovereignty.ruby.db.model.tables.interfaces.IRubyRecords;
import com.psygate.minecraft.spigot.sovereignty.ruby.logging.LogType;

import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RubyRecordsRecord extends UpdatableRecordImpl<RubyRecordsRecord> implements Record4<Long, Long, Timestamp, LogType>, IRubyRecords {

	private static final long serialVersionUID = 2118043304;

	/**
	 * Setter for <code>nucleus.ruby_records.snitch_id</code>.
	 */
	public void setSnitchId(Long value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>nucleus.ruby_records.snitch_id</code>.
	 */
	@Override
	public Long getSnitchId() {
		return (Long) getValue(0);
	}

	/**
	 * Setter for <code>nucleus.ruby_records.record_id</code>.
	 */
	public void setRecordId(Long value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>nucleus.ruby_records.record_id</code>.
	 */
	@Override
	public Long getRecordId() {
		return (Long) getValue(1);
	}

	/**
	 * Setter for <code>nucleus.ruby_records.time_of_event</code>.
	 */
	public void setTimeOfEvent(Timestamp value) {
		setValue(2, value);
	}

	/**
	 * Getter for <code>nucleus.ruby_records.time_of_event</code>.
	 */
	@Override
	public Timestamp getTimeOfEvent() {
		return (Timestamp) getValue(2);
	}

	/**
	 * Setter for <code>nucleus.ruby_records.log_type</code>.
	 */
	public void setLogType(LogType value) {
		setValue(3, value);
	}

	/**
	 * Getter for <code>nucleus.ruby_records.log_type</code>.
	 */
	@Override
	public LogType getLogType() {
		return (LogType) getValue(3);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<Long> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record4 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row4<Long, Long, Timestamp, LogType> fieldsRow() {
		return (Row4) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row4<Long, Long, Timestamp, LogType> valuesRow() {
		return (Row4) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Long> field1() {
		return RubyRecords.RUBY_RECORDS.SNITCH_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Long> field2() {
		return RubyRecords.RUBY_RECORDS.RECORD_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Timestamp> field3() {
		return RubyRecords.RUBY_RECORDS.TIME_OF_EVENT;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<LogType> field4() {
		return RubyRecords.RUBY_RECORDS.LOG_TYPE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Long value1() {
		return getSnitchId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Long value2() {
		return getRecordId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Timestamp value3() {
		return getTimeOfEvent();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public LogType value4() {
		return getLogType();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public RubyRecordsRecord value1(Long value) {
		setSnitchId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public RubyRecordsRecord value2(Long value) {
		setRecordId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public RubyRecordsRecord value3(Timestamp value) {
		setTimeOfEvent(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public RubyRecordsRecord value4(LogType value) {
		setLogType(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public RubyRecordsRecord values(Long value1, Long value2, Timestamp value3, LogType value4) {
		value1(value1);
		value2(value2);
		value3(value3);
		value4(value4);
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached RubyRecordsRecord
	 */
	public RubyRecordsRecord() {
		super(RubyRecords.RUBY_RECORDS);
	}

	/**
	 * Create a detached, initialised RubyRecordsRecord
	 */
	public RubyRecordsRecord(Long snitchId, Long recordId, Timestamp timeOfEvent, LogType logType) {
		super(RubyRecords.RUBY_RECORDS);

		setValue(0, snitchId);
		setValue(1, recordId);
		setValue(2, timeOfEvent);
		setValue(3, logType);
	}
}
