/**
 * This class is generated by jOOQ
 */
package com.psygate.minecraft.spigot.sovereignty.ruby.db.model.tables;


import com.psygate.minecraft.spigot.sovereignty.nucleus.sql.util.UUIDByteConverter;
import com.psygate.minecraft.spigot.sovereignty.ruby.db.model.Keys;
import com.psygate.minecraft.spigot.sovereignty.ruby.db.model.Nucleus;
import com.psygate.minecraft.spigot.sovereignty.ruby.db.model.tables.records.RubyMutesRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RubyMutes extends TableImpl<RubyMutesRecord> {

	private static final long serialVersionUID = -1018934638;

	/**
	 * The reference instance of <code>nucleus.ruby_mutes</code>
	 */
	public static final RubyMutes RUBY_MUTES = new RubyMutes();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<RubyMutesRecord> getRecordType() {
		return RubyMutesRecord.class;
	}

	/**
	 * The column <code>nucleus.ruby_mutes.puuid</code>.
	 */
	public final TableField<RubyMutesRecord, UUID> PUUID = createField("puuid", org.jooq.impl.SQLDataType.BINARY.length(16).nullable(false), this, "", new UUIDByteConverter());

	/**
	 * The column <code>nucleus.ruby_mutes.snitch_id</code>.
	 */
	public final TableField<RubyMutesRecord, Long> SNITCH_ID = createField("snitch_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * Create a <code>nucleus.ruby_mutes</code> table reference
	 */
	public RubyMutes() {
		this("ruby_mutes", null);
	}

	/**
	 * Create an aliased <code>nucleus.ruby_mutes</code> table reference
	 */
	public RubyMutes(String alias) {
		this(alias, RUBY_MUTES);
	}

	private RubyMutes(String alias, Table<RubyMutesRecord> aliased) {
		this(alias, aliased, null);
	}

	private RubyMutes(String alias, Table<RubyMutesRecord> aliased, Field<?>[] parameters) {
		super(alias, Nucleus.NUCLEUS, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<RubyMutesRecord> getPrimaryKey() {
		return Keys.KEY_RUBY_MUTES_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<RubyMutesRecord>> getKeys() {
		return Arrays.<UniqueKey<RubyMutesRecord>>asList(Keys.KEY_RUBY_MUTES_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<RubyMutesRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<RubyMutesRecord, ?>>asList(Keys.RUBY_MUTES_IBFK_1);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public RubyMutes as(String alias) {
		return new RubyMutes(alias, this);
	}

	/**
	 * Rename this table
	 */
	public RubyMutes rename(String name) {
		return new RubyMutes(name, null);
	}
}
