/**
 * This class is generated by jOOQ
 */
package com.psygate.minecraft.spigot.sovereignty.ruby.db.model.tables;


import com.psygate.minecraft.spigot.sovereignty.nucleus.sql.util.UUIDByteConverter;
import com.psygate.minecraft.spigot.sovereignty.ruby.data.SnitchType;
import com.psygate.minecraft.spigot.sovereignty.ruby.db.model.Keys;
import com.psygate.minecraft.spigot.sovereignty.ruby.db.model.Nucleus;
import com.psygate.minecraft.spigot.sovereignty.ruby.db.model.tables.records.RubySnitchesRecord;
import com.psygate.minecraft.spigot.sovereignty.ruby.sql.util.SnitchTypeConverter;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RubySnitches extends TableImpl<RubySnitchesRecord> {

	private static final long serialVersionUID = -1473012542;

	/**
	 * The reference instance of <code>nucleus.ruby_snitches</code>
	 */
	public static final RubySnitches RUBY_SNITCHES = new RubySnitches();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<RubySnitchesRecord> getRecordType() {
		return RubySnitchesRecord.class;
	}

	/**
	 * The column <code>nucleus.ruby_snitches.x</code>.
	 */
	public final TableField<RubySnitchesRecord, Integer> X = createField("x", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>nucleus.ruby_snitches.y</code>.
	 */
	public final TableField<RubySnitchesRecord, Integer> Y = createField("y", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>nucleus.ruby_snitches.z</code>.
	 */
	public final TableField<RubySnitchesRecord, Integer> Z = createField("z", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>nucleus.ruby_snitches.world_uuid</code>.
	 */
	public final TableField<RubySnitchesRecord, UUID> WORLD_UUID = createField("world_uuid", org.jooq.impl.SQLDataType.BINARY.length(16).nullable(false), this, "", new UUIDByteConverter());

	/**
	 * The column <code>nucleus.ruby_snitches.snitch_id</code>.
	 */
	public final TableField<RubySnitchesRecord, Long> SNITCH_ID = createField("snitch_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>nucleus.ruby_snitches.creator</code>.
	 */
	public final TableField<RubySnitchesRecord, UUID> CREATOR = createField("creator", org.jooq.impl.SQLDataType.BINARY.length(16).nullable(false), this, "", new UUIDByteConverter());

	/**
	 * The column <code>nucleus.ruby_snitches.creation</code>.
	 */
	public final TableField<RubySnitchesRecord, Timestamp> CREATION = createField("creation", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>nucleus.ruby_snitches.group_id</code>.
	 */
	public final TableField<RubySnitchesRecord, Long> GROUP_ID = createField("group_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>nucleus.ruby_snitches.snitch_name</code>.
	 */
	public final TableField<RubySnitchesRecord, String> SNITCH_NAME = createField("snitch_name", org.jooq.impl.SQLDataType.VARCHAR.length(64).nullable(false), this, "");

	/**
	 * The column <code>nucleus.ruby_snitches.snitch_type</code>.
	 */
	public final TableField<RubySnitchesRecord, SnitchType> SNITCH_TYPE = createField("snitch_type", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "", new SnitchTypeConverter());

	/**
	 * Create a <code>nucleus.ruby_snitches</code> table reference
	 */
	public RubySnitches() {
		this("ruby_snitches", null);
	}

	/**
	 * Create an aliased <code>nucleus.ruby_snitches</code> table reference
	 */
	public RubySnitches(String alias) {
		this(alias, RUBY_SNITCHES);
	}

	private RubySnitches(String alias, Table<RubySnitchesRecord> aliased) {
		this(alias, aliased, null);
	}

	private RubySnitches(String alias, Table<RubySnitchesRecord> aliased, Field<?>[] parameters) {
		super(alias, Nucleus.NUCLEUS, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<RubySnitchesRecord, Long> getIdentity() {
		return Keys.IDENTITY_RUBY_SNITCHES;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<RubySnitchesRecord> getPrimaryKey() {
		return Keys.KEY_RUBY_SNITCHES_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<RubySnitchesRecord>> getKeys() {
		return Arrays.<UniqueKey<RubySnitchesRecord>>asList(Keys.KEY_RUBY_SNITCHES_PRIMARY, Keys.KEY_RUBY_SNITCHES_SNITCH_ID);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public RubySnitches as(String alias) {
		return new RubySnitches(alias, this);
	}

	/**
	 * Rename this table
	 */
	public RubySnitches rename(String name) {
		return new RubySnitches(name, null);
	}
}
